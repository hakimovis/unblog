<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Unblog]]></title>
  <link href="http://unblog.ikito.ru/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://unblog.ikito.ru/"/>
  <updated>2013-05-18T13:12:17+06:00</updated>
  <id>http://unblog.ikito.ru/</id>
  <author>
    <name><![CDATA[Hakimovis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Добавляем генератор миграции и моделей к своему гему]]></title>
    <link href="http://unblog.ikito.ru/blog/dobavliaiem-ghienierator-k-svoiemu-ghiemu"/>
    <updated>2013-05-18T12:57:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/dobavliaiem-ghienierator-k-svoiemu-ghiemu</id>
    <content type="html"><![CDATA[<p>В продолжение предыдущей темы расскажу как научить свой гем использовать генератор rails для добавления своей модели в проект:</p>

<p>``` bash
$ rails generate install_my_gem</p>

<pre><code>  create  db/migrate/20120724092434_create_my_models.rb
  create  app/models/my_model.rb
</code></pre>

<p>```</p>

<p>Во первых, создадим сами файлы миграции и модели. Для удобства это лучше делать в традиционных для рельсового прокта местах. Все-таки их придется тестировать. Во вторых, создадим файл install_my_gem.rb ("install_my_gem" можно заменить на название вашего генератора) в папке lig/generators/install_my_gem:</p>

<p>``` ruby
class InstallMyGemGenerator &lt; Rails::Generators::Base
  source_root MyGem::GEM_PATH # В этой константе содержится путь к установленному гему
  # Все методы, объявленные ниже будут выполняться по порядку по команде rails generate install_my_gem</p>

<p>  def copy_migration</p>

<pre><code># Копируем файл миграции из своего db/migrate в тот же db/migrate проекта
migration_file = '20120724092434_create_my_models.rb'
copy_file "db/migrate/#{migration_file}", "db/migrate/#{migration_file}"
</code></pre>

<p>  end</p>

<p>  def copy_my_model</p>

<pre><code># Аналогично копируем файл проекта
copy_file 'app/models/my_model.rb', 'app/models/my_model.rb'
</code></pre>

<p>  end
end
```</p>

<p>MyGem::GEM_PATH нужно будет объявить где-нибудь в my_gem.rb:
<code>ruby
module MyGem
  GEM_PATH = File.expand_path('..', File.dirname(__FILE__))
  ...
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Использование и тестирование моделей ActiveRecord в своем геме]]></title>
    <link href="http://unblog.ikito.ru/blog/ispol%27zovaniie-i-tiestirovaniie-modieliei-activerecord-v-svoiem-ghiemie"/>
    <updated>2013-05-18T12:38:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/ispol'zovaniie-i-tiestirovaniie-modieliei-activerecord-v-svoiem-ghiemie</id>
    <content type="html"><![CDATA[<p>Если ruby gem должен приносить с собой модель, возникнет вопрос - как же его тестировать. Разумеется, подымать для прогона тестов вашего гема базу данных, навешивать миграции и конфигурить конфиги никто не будет, поэтому есть замечательная штука - sqlite3-адаптер для ActiveRecord, работающий с базой данных прямо в памяти. Чтобы воспользоваться этим не нужно ничего особо хитрого.</p>

<p>Сначала добавим зависимости в Gemfile:
<code>ruby
group :test do
  # Т.к. в реальном проекте гем activerecord уже будет подключен и база данных будет своя,
  # а не sqlite, подключаем их только для группы :test
  gem 'activerecord'
  gem 'sqlite3'
end
</code></p>

<p>и подгружаем их же в spec_helper.rb:</p>

<p><code>ruby
require 'active_record'
require 'sqlite3'
</code></p>

<p>Создаем в spec/support файл active_record.rb с примерно таким содержанием:</p>

<p>``` ruby
require 'rspec/rails/extensions/active_record/base' # Всяческие хелперы для тестирования.</p>

<h1>Тут указываем, что будем использовать адаптер sqlite3 и базу данных размещаем в памяти.</h1>

<p>ActiveRecord::Base.establish_connection adapter: "sqlite3", database: ":memory:"</p>

<h1>Запускаем миграции из папки db/migrate или любой другой, которую укажем.</h1>

<p>ActiveRecord::Migrator.up "db/migrate"</p>

<h1>А это нужно, чтобы каждый тест запускался в своей транзакции, которая будет откатываться назад</h1>

<p>RSpec.configure do |config|
  config.around do |example|</p>

<pre><code>ActiveRecord::Base.transaction do
  example.run
  raise ActiveRecord::Rollback
end
</code></pre>

<p>  end
end
```</p>

<p>В обшем-то все. Мы можем использовать наши модели на полную катушку если, конечно, не забыли их подгрузить в spec_helper.rb:
<code>ruby
Dir["#{File.dirname(__FILE__)}/../app/models/*.rb"].each { |f| require f }
</code></p>

<p>Это очень вольный перевод вот этой статьи: <a href="http://iain.nl/testing-activerecord-in-isolation">http://iain.nl/testing-activerecord-in-isolation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby On Rails и загрузка изображений на Amazon S3 Storage]]></title>
    <link href="http://unblog.ikito.ru/blog/ruby-on-rails-i-zaghruzka-izobrazhienii-na-amazon-s3-storage"/>
    <updated>2013-05-12T23:23:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/ruby-on-rails-i-zaghruzka-izobrazhienii-na-amazon-s3-storage</id>
    <content type="html"><![CDATA[<p>Даже не подозревал, что прикрутить аплоад картинок на амазоновый S3 окажется так просто. Добавляем гемы в Gemfile:</p>

<p>``` ruby</p>

<pre><code>gem 'paperclip'
gem 'aws-sdk'
</code></pre>

<p>```</p>

<p>Делаем миграцию:</p>

<p>``` ruby
class CreatePhotos &lt; ActiveRecord::Migration
  def self.up</p>

<pre><code>create_table :photos do |t|
  t.boolean :enabled, null: false, default: true
  t.timestamps
end
add_attachment :photos, :image
</code></pre>

<p>  end</p>

<p>  def self.down</p>

<pre><code>drop_table :photos
</code></pre>

<p>  end
end
```</p>

<p>Тут у модели Photo будет только два поля - image и enabled (КО). Теперь модель:
``` ruby
class Photo &lt; ActiveRecord::Base
  attr_accessible :enabled, :image
  has_attached_file(</p>

<pre><code>:image,
styles: {medium: "500x500&gt;", small: "50x50&gt;"},
storage: :s3,
s3_credentials: "#{Rails.root}/config/s3.yml",
bucket: 'bucket_name',
s3_protocol: 'https',
s3_host_name: 's3-eu-west-1.amazonaws.com'
</code></pre>

<p>  )
end
```</p>

<p>Тут все в принципе ясно. Изображение будет храниться еще в двух размерах - medium (500x500) и small (50x50). Пришлось немного почесать голову над последними двумя опциями, без них Амазон будет ругаться XML-кой с просьбой указать endpoint. В s3.yml пишем свои ключи отсюда <a href="https://portal.aws.amazon.com/gp/aws/securityCredentials#account_identifiers">portal.aws.amazon.com</a> (не забывая добавить этот конфиг в .gitignore):</p>

<p><code>
access_key_id: *****
secret_access_key: ******
</code></p>

<p>Вот и вся магия. Теперь в форме загрузки будем писать так:</p>

<p>``` haml
= form_for @photo, url: photos_path, html: {id: "photo_form", multipart: true} do |f|
  = f.file_field :image
  = f.check_box :enabled
  .actions</p>

<pre><code>= f.submit 'Сохранить'
</code></pre>

<p>```</p>

<p>И чтобы показать нашу картинку в среднем размере со ссылкой на оригинал в шаблонах пишем:</p>

<p><code>haml
%a{href: @photo.image.url}= image_tag @photo.image.url :medium
</code></p>

<p>Ну не радость ли?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Старое: несколько ссылок про Ruby]]></title>
    <link href="http://unblog.ikito.ru/blog/staroie-nieskol%27ko-ssylok-pro-ruby"/>
    <updated>2013-04-19T10:57:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/staroie-nieskol'ko-ssylok-pro-ruby</id>
    <content type="html"><![CDATA[<p>Несколько ссылок, касающихся Ruby и рельсов из старого unblog.ikito.ru.</p>

<ul>
<li>Презентация про отличия ruby1.9 от ruby1.8.6 <a href="http://slideshow.rubyforge.org/ruby19.html">http://slideshow.rubyforge.org/ruby19.html</a></li>
<li>Небольшое, но понятное руководство по созданию DSL на Ruby <a href="http://habrahabr.ru/post/48754/">http://habrahabr.ru/post/48754</a></li>
<li>Про деплой рельсов <a href="http://linux.vsevteme.ru/2010/08/17/blog/nastroyka-rails-servera-na-ubuntu-10-04-server-edition">http://linux.vsevteme.ru</a></li>
<li>Интерактивный учебник по руби <a href="https://github.com/edgecase/ruby_koans">https://github.com/edgecase/ruby_koans</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Узнайте bundler лучше]]></title>
    <link href="http://unblog.ikito.ru/blog/uznaitie-bundler-luchshie"/>
    <updated>2013-03-15T22:27:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/uznaitie-bundler-luchshie</id>
    <content type="html"><![CDATA[<p>Статья про bundler, много интересного: <a href="http://habrahabr.ru/company/engineyard/blog/172807/">http://habrahabr.ru/company/engineyard/blog/172807/</a></p>

<p>Вкратце:<br/>
<strong>bundle outdated</strong> показывает список гемов, которые можно обновить.<br/>
<strong>bundle show</strong> показывает путь, куда установлен гем.<br/>
<strong>bundle open</strong> открывает код гема в редакторе:</p>

<pre><code>$ bundle open json
To open a bundled gem, set $EDITOR or $BUNDLER_EDITOR
$ export EDITOR=vim
$ bundle open json
</code></pre>

<p><strong>bundle prestine</strong> восстанавливает код указанного гема, если мы его подправляли редактором (используя bundle open)<br/>
<strong>bundle show --path</strong> показывает список путей, где установлены все гемы проекта. Вроде, так можно найти файлы, где определяются интересные нам классы:</p>

<pre><code>grep -R ActionDispatch::RemoteIp `bundle show --paths`
</code></pre>

<p><strong>bundle init</strong> создает пустой Gemfile<br/>
Гемы можно брать из локального репозитория:</p>

<pre><code>$ echo "gem 'rack', :github =&gt; 'rack/rack', :branch =&gt; 'master'" &gt;&gt; Gemfile
$ bundle config local.rack ~/sw/gems/rack
$ bundle show rack
/Users/andre/sw/gems/rack
</code></pre>

<p>В bundler 1.2 прямо в Gemfile можно объявить версию ruby. Если текущая версия не будет совпадать, получим исключение:</p>

<pre><code>ruby '1.9.3'
</code></pre>

<p>Можно построить визуальную схему зависимостей гемов:</p>

<pre><code>$ brew install graphviz
$ gem install ruby-graphviz
$ bundle viz
</code></pre>

<p><strong>bundle console</strong> запустит ruby-консоль, но со всеми загруженными гемами, указанными в Gemfile. Удобно, если нам не нужен гем rails.</p>

<p>Создание заготовки для своего гема, установка его в систему и публикация на rubygems.org:</p>

<pre><code>bundle gem my\_super\_gem
rake install
rake release
</code></pre>

<p>Вот так можно запускать rake-таски без полного написания bundle exec rspec spec:</p>

<pre><code>$ bundle binstubs rspec-core
$ bin/rspec spec
No examples found.
</code></pre>
]]></content>
  </entry>
  
</feed>
