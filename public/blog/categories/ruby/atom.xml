<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Unblog]]></title>
  <link href="http://unblog.ikito.ru/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://unblog.ikito.ru/"/>
  <updated>2014-04-29T14:46:07+06:00</updated>
  <id>http://unblog.ikito.ru/</id>
  <author>
    <name><![CDATA[Hakimovis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Поддержка Unicode в консоли Ruby для MacOS]]></title>
    <link href="http://unblog.ikito.ru/blog/irb-unicode-support"/>
    <updated>2014-04-29T14:33:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/irb-unicode-support</id>
    <content type="html"><![CDATA[<p>Если в консоли Ruby при вводе русских букв выводится что-то вроде <code>&gt;&gt; \U+FFD1\U+FFD0\U+FFB5\U+FFD1\U+FFD1</code> нужно установить readline:</p>

<p><code>
$ brew update &amp;&amp; brew install readline
</code></p>

<p>И пересобрать версию Ruby с указанием того, что используем новый readline:</p>

<p><code>
CONFIGURE_OPTS=--with-readline-dir=`brew --prefix readline` rbenv install 1.9.3-p374
</code></p>

<p>Вместо 1.9.3-p374 нужно указать свою версию.</p>

<p>Взято <a href="https://coderwall.com/p/wdm-_q">отсюда</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Поиск методов объекта]]></title>
    <link href="http://unblog.ikito.ru/blog/poisk-mietodov-obiekta"/>
    <updated>2013-10-29T15:41:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/poisk-mietodov-obiekta</id>
    <content type="html"><![CDATA[<p>Часто бывает нужно посмотреть, какие методы есть у объекта. Для этого существует простой метод:</p>

<p>```</p>

<blockquote><p>object = 1
object.methods.sort
=> [:!, :!=, :!~, :%, :&amp;, :*, :**, :+, :+@, :-, :-@, :/, :&lt;, :&lt;&lt;, :&lt;=, :&lt;=>, :==, :===, :=~, :>, :>=, :>>, :[], :<sup>,</sup> :<strong>id</strong>, :<strong>send</strong>, :`, :abs, :abs2, :acts_like?, :ago, :angle, :arg, :as_json, :between?, :binding_n, :blank?, :breakpoint, :byte, :bytes, :capture, :ceil, :chr, :class, :class_eval, :clone, :coerce, :conj, :conjugate, :day, :days, :debugger, :deep_dup, :define_singleton_method, :denominator, :display, :div, :divmod, :downto, :dup, :duplicable?, :enable_warnings, :encode_json, :enum_for, :eql?, :equal?, :even?, :exabyte, :exabytes, :extend, :fdiv, :find_methods, :floor, :fortnight, :fortnights, :freeze, :from_now, :frozen?, :gcd, :gcdlcm, :gem, :gigabyte, :gigabytes, :hash, :hour, :hours, :html_safe?, :i, :imag, :imaginary, :in?, :initialize_clone, :initialize_dup, :inspect, :instance_eval, :instance_exec, :instance_of?, :instance_values, :instance_variable_defined?, :instance_variable_get, :instance_variable_names, :instance_variable_set, :instance_variables, :integer?, :is_a?, :is_haml?, :kilobyte, :kilobytes, :kind_of?, :lcm, :load, :load_dependency, :magnitude, :megabyte, :megabytes, :method, :methods, :minute, :minutes, :modulo, :month, :months, :multiple_of?, :next, :nil?, :nonzero?, :numerator, :object_id, :odd?, :ord, :ordinal, :ordinalize, :petabyte, :petabytes, :phase, :polar, :pred, :presence, :present?, :pretty_inspect, :pretty_print, :pretty_print_cycle, :pretty_print_inspect, :pretty_print_instance_variables, :private_methods, :protected_methods, :psych_to_yaml, :psych_y, :public_method, :public_methods, :public_send, :quietly, :quo, :rationalize, :real, :real?, :rect, :rectangular, :remainder, :require, :require_dependency, :require_or_load, :respond_to?, :respond_to_missing?, :round, :second, :seconds, :send, :silence, :silence_stderr, :silence_stream, :silence_warnings, :since, :singleton_class, :singleton_method_added, :singleton_methods, :size, :step, :succ, :suppress, :suppress_warnings, :taint, :tainted?, :tap, :terabyte, :terabytes, :times, :to_bn, :to_c, :to_d, :to_default_s, :to_enum, :to_f, :to_formatted_s, :to_i, :to_int, :to_json, :to_param, :to_query, :to_r, :to_ruby, :to_s, :to_v8, :to_yaml, :to_yaml_properties, :truncate, :trust, :try, :try!, :uniq_methods, :unloadable, :untaint, :until, :untrust, :untrusted?, :upto, :week, :weeks, :with_options, :with_warnings, :year, :years, :zero?, :|, :~]
```</p></blockquote>

<p>Среди такой каши из общих для всех классов методов и методов самого объекта трудно найти то, что нас заинтересует, правда? Методы вроде <code>!, :!=, :!~, :&lt;, :&lt;=, is_a?, :is_haml?, :kind_of?, :load</code> и куча других есть у каждого объекта, а нам надо именно специфичные для нашего объекта методы. Логично, что их надо отсеять. И лучше это делать для всей ruby-консоли.</p>

<p>Для этого открываем файл <code>.irbrc</code>, который обычно находится в домашней папке и добавляем туда следующее:</p>

<p>``` ruby</p>

<h1>For methods introspection</h1>

<p>class Object
  def uniq_methods</p>

<pre><code>(self.methods - Class.methods).sort
</code></pre>

<p>  end</p>

<p>  def find_methods(pattern)</p>

<pre><code>(self.methods.find_all {|m| m.to_s.include?(pattern.to_s)}).sort
</code></pre>

<p>  end
end
```</p>

<p>Теперь, для любого объекта будут доступны два метода: <code>uniq_methods</code> и <code>find_methods</code>:</p>

<p>``` ruby</p>

<blockquote><p>Date.today.uniq_methods
=> [:+, :-, :&lt;&lt;, :>>, :acts_like_date?, :advance, :ago, :ajd, :amjd, :asctime, :at_beginning_of_day, :at_beginning_of_month, :at_beginning_of_quarter, :at_beginning_of_week, :at_beginning_of_year, :at_end_of_day, :at_end_of_month, :at_end_of_quarter, :at_end_of_week, :at_end_of_year, :at_midnight, :beginning_of_day, :beginning_of_month, :beginning_of_quarter, :beginning_of_week, :beginning_of_year, :between?, :change, :compare_with_coercion, :compare_without_coercion, :ctime, :cwday, :cweek, :cwyear, :day, :day_fraction, :days_ago, :days_since, :days_to_week_start, :default_inspect, :downto, :end_of_day, :end_of_month, :end_of_quarter, :end_of_week, :end_of_year, ...]</p>

<p>Date.today.find_methods 'year'
=> [:at_beginning_of_year, :at_end_of_year, :beginning_of_year, :cwyear, :end_of_year, :last_year, :next_year, :prev_year, :year, :years_ago, :years_since]
```</p></blockquote>

<p>Первый метод вернет методы, которые есть только у этого объекта, без общих для всех классов. Вторым методом удобно искать методы по словам. Например, выше мы нашли все методы, содержащие слово year.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Стайлгайды Ruby на Github]]></title>
    <link href="http://unblog.ikito.ru/blog/stailghaidy-ruby-na-github"/>
    <updated>2013-06-13T03:02:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/stailghaidy-ruby-na-github</id>
    <content type="html"><![CDATA[<p>Вполне разумные стайлгайды для языка Ruby, которые используются разработчиками Github: <a href="https://github.com/styleguide/ruby">https://github.com/styleguide/ruby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Плагин для Sublime Text 2 для автозамены старого стиля хэшей на новый]]></title>
    <link href="http://unblog.ikito.ru/blog/plaghin-dlia-sublime-text-2-dlia-avtozamieny-starogho-stilia-kheshiei-na-novyi"/>
    <updated>2013-06-07T14:06:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/plaghin-dlia-sublime-text-2-dlia-avtozamieny-starogho-stilia-kheshiei-na-novyi</id>
    <content type="html"><![CDATA[<p>Вот такой просненький плагин для Sublime Text 2 помогает заменять старый стиль хэшей Ruby {:foo => 'bar'} на новый {foo: 'bar'}</p>

<p>``` python
import sublime, sublime_plugin
import re</p>

<p>class RubyNewHashStyle(sublime_plugin.TextCommand):</p>

<pre><code>def run(self, edit):
    selection = self.view.sel()[0]
    code_block = self.view.substr(selection)
    result = re.sub(r':([a-z\d_]+) =&gt;', r'\1:', code_block)
    self.view.replace(edit, selection, result)
</code></pre>

<p>```</p>

<p>Чтобы повесить его на хоткей, в Preferences, Key Bindings - User вставляем:
<code>python
[
 { "keys": ["ctrl+shift+h"], "command": "ruby_new_hash_style" }
]
</code></p>

<p>Теперь можно просто выделить фрагмент кода с описанием хэша, нажать ctrl+shift+h и он заменится на новый:</p>

<p><code>ruby
  item = {:title =&gt; 'Зонтик', :status =&gt; 'Новый', :price =&gt; '400', :order =&gt; 'В наличии'}
  # Заменится на:
  item = {title: 'Зонтик', status: 'Новый', price: '400', order: 'В наличии'}
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Добавляем генератор миграции и моделей к своему гему]]></title>
    <link href="http://unblog.ikito.ru/blog/dobavliaiem-ghienierator-k-svoiemu-ghiemu"/>
    <updated>2013-05-18T12:57:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/dobavliaiem-ghienierator-k-svoiemu-ghiemu</id>
    <content type="html"><![CDATA[<p>В продолжение предыдущей темы расскажу как научить свой гем использовать генератор rails для добавления своей модели в проект:</p>

<p>``` bash
$ rails generate install_my_gem</p>

<pre><code>  create  db/migrate/20120724092434_create_my_models.rb
  create  app/models/my_model.rb
</code></pre>

<p>```</p>

<p>Во первых, создадим сами файлы миграции и модели. Для удобства это лучше делать в традиционных для рельсового прокта местах. Все-таки их придется тестировать. Во вторых, создадим файл install_my_gem.rb ("install_my_gem" можно заменить на название вашего генератора) в папке lig/generators/install_my_gem:</p>

<p>``` ruby
class InstallMyGemGenerator &lt; Rails::Generators::Base
  source_root MyGem::GEM_PATH # В этой константе содержится путь к установленному гему
  # Все методы, объявленные ниже будут выполняться по порядку по команде rails generate install_my_gem</p>

<p>  def copy_migration</p>

<pre><code># Копируем файл миграции из своего db/migrate в тот же db/migrate проекта
migration_file = '20120724092434_create_my_models.rb'
copy_file "db/migrate/#{migration_file}", "db/migrate/#{migration_file}"
</code></pre>

<p>  end</p>

<p>  def copy_my_model</p>

<pre><code># Аналогично копируем файл проекта
copy_file 'app/models/my_model.rb', 'app/models/my_model.rb'
</code></pre>

<p>  end
end
```</p>

<p>MyGem::GEM_PATH нужно будет объявить где-нибудь в my_gem.rb:
<code>ruby
module MyGem
  GEM_PATH = File.expand_path('..', File.dirname(__FILE__))
  ...
</code></p>
]]></content>
  </entry>
  
</feed>
