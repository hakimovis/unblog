<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Unblog]]></title>
  <link href="http://unblog.ikito.ru/atom.xml" rel="self"/>
  <link href="http://unblog.ikito.ru/"/>
  <updated>2013-06-24T12:31:55+06:00</updated>
  <id>http://unblog.ikito.ru/</id>
  <author>
    <name><![CDATA[Hakimovis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Тестирование Rake-тасков]]></title>
    <link href="http://unblog.ikito.ru/blog/tiestirovaniie-rake-taskov"/>
    <updated>2013-06-24T12:23:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/tiestirovaniie-rake-taskov</id>
    <content type="html"><![CDATA[<p>Вот тут <a href="http://robots.thoughtbot.com/post/11957424161/test-rake-tasks-like-a-boss">http://robots.thoughtbot.com</a> подсмотрел более-менее красивый способ тестирования rake-тасков с помощью rspec. Сначала создадим вспомогательный файл:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># spec/support/shared_contexts/rake.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;rake&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">shared_context</span> <span class="s2">&quot;rake&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:rake</span><span class="p">)</span>      <span class="p">{</span> <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:task_name</span><span class="p">)</span> <span class="p">{</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">top_level_description</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:task_path</span><span class="p">)</span> <span class="p">{</span> <span class="s2">&quot;lib/tasks/</span><span class="si">#{</span><span class="n">task_name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;:&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">subject</span>         <span class="p">{</span> <span class="n">rake</span><span class="o">[</span><span class="n">task_name</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">loaded_files_excluding_current_rake_file</span>
</span><span class='line'>    <span class="vg">$&quot;</span><span class="o">.</span><span class="n">reject</span> <span class="p">{</span><span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">file</span> <span class="o">==</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">task_path</span><span class="si">}</span><span class="s2">.rake&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Rake</span><span class="o">.</span><span class="n">application</span> <span class="o">=</span> <span class="n">rake</span>
</span><span class='line'>    <span class="no">Rake</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">rake_require</span><span class="p">(</span><span class="n">task_path</span><span class="p">,</span> <span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span><span class="p">,</span> <span class="n">loaded_files_excluding_current_rake_file</span><span class="p">)</span>
</span><span class='line'>    <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">.</span><span class="n">define_task</span><span class="p">(</span><span class="ss">:environment</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">exec_rake_task</span>
</span><span class='line'>    <span class="n">subject</span><span class="o">.</span><span class="n">invoke</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Теперь можно писать сами спеки, назвая блок describe именем rake-таска:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;world:destroy&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">include_context</span> <span class="s1">&#39;rake&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;creates instance of WorldDestroyer and calls #destroy! method&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">WorldDestroyer</span><span class="o">.</span><span class="n">any_instance</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:destroy!</span><span class="p">)</span>
</span><span class='line'>    <span class="n">exec_rake_task</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Стайлгайды Ruby на Github]]></title>
    <link href="http://unblog.ikito.ru/blog/stailghaidy-ruby-na-github"/>
    <updated>2013-06-13T03:02:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/stailghaidy-ruby-na-github</id>
    <content type="html"><![CDATA[<p>Вполне разумные стайлгайды для языка Ruby, которые используются разработчиками Github: <a href="https://github.com/styleguide/ruby">https://github.com/styleguide/ruby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Плагин для Sublime Text 2 для автозамены старого стиля хэшей на новый]]></title>
    <link href="http://unblog.ikito.ru/blog/plaghin-dlia-sublime-text-2-dlia-avtozamieny-starogho-stilia-kheshiei-na-novyi"/>
    <updated>2013-06-07T14:06:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/plaghin-dlia-sublime-text-2-dlia-avtozamieny-starogho-stilia-kheshiei-na-novyi</id>
    <content type="html"><![CDATA[<p>Вот такой просненький плагин для Sublime Text 2 помогает заменять старый стиль хэшей Ruby {:foo => &#8216;bar&#8217;} на новый {foo: &#8216;bar&#8217;}</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sublime</span><span class="o">,</span> <span class="nn">sublime_plugin</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RubyNewHashStyle</span><span class="p">(</span><span class="n">sublime_plugin</span><span class="o">.</span><span class="n">TextCommand</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">edit</span><span class="p">):</span>
</span><span class='line'>        <span class="n">selection</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">sel</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">code_block</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">substr</span><span class="p">(</span><span class="n">selection</span><span class="p">)</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">r&#39;:([a-z\d_]+) =&gt;&#39;</span><span class="p">,</span> <span class="s">r&#39;\1:&#39;</span><span class="p">,</span> <span class="n">code_block</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">edit</span><span class="p">,</span> <span class="n">selection</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Чтобы повесить его на хоткей, в Preferences, Key Bindings - User вставляем:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span>
</span><span class='line'> <span class="p">{</span> <span class="s">&quot;keys&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;ctrl+shift+h&quot;</span><span class="p">],</span> <span class="s">&quot;command&quot;</span><span class="p">:</span> <span class="s">&quot;ruby_new_hash_style&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Теперь можно просто выделить фрагмент кода с описанием хэша, нажать ctrl+shift+h и он заменится на новый:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">item</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;Зонтик&#39;</span><span class="p">,</span> <span class="ss">:status</span> <span class="o">=&gt;</span> <span class="s1">&#39;Новый&#39;</span><span class="p">,</span> <span class="ss">:price</span> <span class="o">=&gt;</span> <span class="s1">&#39;400&#39;</span><span class="p">,</span> <span class="ss">:order</span> <span class="o">=&gt;</span> <span class="s1">&#39;В наличии&#39;</span><span class="p">}</span>
</span><span class='line'>  <span class="c1"># Заменится на:</span>
</span><span class='line'>  <span class="n">item</span> <span class="o">=</span> <span class="p">{</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Зонтик&#39;</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="s1">&#39;Новый&#39;</span><span class="p">,</span> <span class="ss">price</span><span class="p">:</span> <span class="s1">&#39;400&#39;</span><span class="p">,</span> <span class="ss">order</span><span class="p">:</span> <span class="s1">&#39;В наличии&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Добавляем генератор миграции и моделей к своему гему]]></title>
    <link href="http://unblog.ikito.ru/blog/dobavliaiem-ghienierator-k-svoiemu-ghiemu"/>
    <updated>2013-05-18T12:57:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/dobavliaiem-ghienierator-k-svoiemu-ghiemu</id>
    <content type="html"><![CDATA[<p>В продолжение предыдущей темы расскажу как научить свой гем использовать генератор rails для добавления своей модели в проект:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rails generate install_my_gem
</span><span class='line'>
</span><span class='line'>      create  db/migrate/20120724092434_create_my_models.rb
</span><span class='line'>      create  app/models/my_model.rb
</span></code></pre></td></tr></table></div></figure>


<p>Во первых, создадим сами файлы миграции и модели. Для удобства это лучше делать в традиционных для рельсового прокта местах. Все-таки их придется тестировать. Во вторых, создадим файл install_my_gem.rb (&#8220;install_my_gem&#8221; можно заменить на название вашего генератора) в папке lig/generators/install_my_gem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">InstallMyGemGenerator</span> <span class="o">&lt;</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Generators</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">source_root</span> <span class="ss">MyGem</span><span class="p">:</span><span class="ss">:GEM_PATH</span> <span class="c1"># В этой константе содержится путь к установленному гему</span>
</span><span class='line'>  <span class="c1"># Все методы, объявленные ниже будут выполняться по порядку по команде rails generate install_my_gem</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">copy_migration</span>
</span><span class='line'>    <span class="c1"># Копируем файл миграции из своего db/migrate в тот же db/migrate проекта</span>
</span><span class='line'>    <span class="n">migration_file</span> <span class="o">=</span> <span class="s1">&#39;20120724092434_create_my_models.rb&#39;</span>
</span><span class='line'>    <span class="n">copy_file</span> <span class="s2">&quot;db/migrate/</span><span class="si">#{</span><span class="n">migration_file</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;db/migrate/</span><span class="si">#{</span><span class="n">migration_file</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">copy_my_model</span>
</span><span class='line'>    <span class="c1"># Аналогично копируем файл проекта</span>
</span><span class='line'>    <span class="n">copy_file</span> <span class="s1">&#39;app/models/my_model.rb&#39;</span><span class="p">,</span> <span class="s1">&#39;app/models/my_model.rb&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>MyGem::GEM_PATH нужно будет объявить где-нибудь в my_gem.rb:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MyGem</span>
</span><span class='line'>  <span class="no">GEM_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">))</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Использование и тестирование моделей ActiveRecord в своем геме]]></title>
    <link href="http://unblog.ikito.ru/blog/ispol%27zovaniie-i-tiestirovaniie-modieliei-activerecord-v-svoiem-ghiemie"/>
    <updated>2013-05-18T12:38:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/ispol&#8217;zovaniie-i-tiestirovaniie-modieliei-activerecord-v-svoiem-ghiemie</id>
    <content type="html"><![CDATA[<p>Если ruby gem должен приносить с собой модель, возникнет вопрос - как же его тестировать. Разумеется, подымать для прогона тестов вашего гема базу данных, навешивать миграции и конфигурить конфиги никто не будет, поэтому есть замечательная штука - sqlite3-адаптер для ActiveRecord, работающий с базой данных прямо в памяти. Чтобы воспользоваться этим не нужно ничего особо хитрого.</p>

<p>Сначала добавим зависимости в Gemfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Т.к. в реальном проекте гем activerecord уже будет подключен и база данных будет своя,</span>
</span><span class='line'>  <span class="c1"># а не sqlite, подключаем их только для группы :test</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;activerecord&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>и подгружаем их же в spec_helper.rb:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_record&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;sqlite3&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Создаем в spec/support файл active_record.rb с примерно таким содержанием:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/rails/extensions/active_record/base&#39;</span> <span class="c1"># Всяческие хелперы для тестирования.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Тут указываем, что будем использовать адаптер sqlite3 и базу данных размещаем в памяти.</span>
</span><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">establish_connection</span> <span class="ss">adapter</span><span class="p">:</span> <span class="s2">&quot;sqlite3&quot;</span><span class="p">,</span> <span class="ss">database</span><span class="p">:</span> <span class="s2">&quot;:memory:&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Запускаем миграции из папки db/migrate или любой другой, которую укажем.</span>
</span><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migrator</span><span class="o">.</span><span class="n">up</span> <span class="s2">&quot;db/migrate&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># А это нужно, чтобы каждый тест запускался в своей транзакции, которая будет откатываться назад</span>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">around</span> <span class="k">do</span> <span class="o">|</span><span class="n">example</span><span class="o">|</span>
</span><span class='line'>    <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">example</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>      <span class="k">raise</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Rollback</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>В обшем-то все. Мы можем использовать наши модели на полную катушку если, конечно, не забыли их подгрузить в spec_helper.rb:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span><span class="si">}</span><span class="s2">/../app/models/*.rb&quot;</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Это очень вольный перевод вот этой статьи: <a href="http://iain.nl/testing-activerecord-in-isolation">http://iain.nl/testing-activerecord-in-isolation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby On Rails и загрузка изображений на Amazon S3 Storage]]></title>
    <link href="http://unblog.ikito.ru/blog/ruby-on-rails-i-zaghruzka-izobrazhienii-na-amazon-s3-storage"/>
    <updated>2013-05-12T23:23:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/ruby-on-rails-i-zaghruzka-izobrazhienii-na-amazon-s3-storage</id>
    <content type="html"><![CDATA[<p>Даже не подозревал, что прикрутить аплоад картинок на амазоновый S3 окажется так просто. Добавляем гемы в Gemfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;paperclip&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;aws-sdk&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Делаем миграцию:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreatePhotos</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">up</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:photos</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">boolean</span> <span class="ss">:enabled</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">add_attachment</span> <span class="ss">:photos</span><span class="p">,</span> <span class="ss">:image</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">down</span>
</span><span class='line'>    <span class="n">drop_table</span> <span class="ss">:photos</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Тут у модели Photo будет только два поля - image и enabled (КО). Теперь модель:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Photo</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:enabled</span><span class="p">,</span> <span class="ss">:image</span>
</span><span class='line'>  <span class="n">has_attached_file</span><span class="p">(</span>
</span><span class='line'>    <span class="ss">:image</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">styles</span><span class="p">:</span> <span class="p">{</span><span class="ss">medium</span><span class="p">:</span> <span class="s2">&quot;500x500&gt;&quot;</span><span class="p">,</span> <span class="ss">small</span><span class="p">:</span> <span class="s2">&quot;50x50&gt;&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="ss">storage</span><span class="p">:</span> <span class="ss">:s3</span><span class="p">,</span>
</span><span class='line'>    <span class="n">s3_credentials</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/config/s3.yml&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">bucket</span><span class="p">:</span> <span class="s1">&#39;bucket_name&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">s3_protocol</span><span class="p">:</span> <span class="s1">&#39;https&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">s3_host_name</span><span class="p">:</span> <span class="s1">&#39;s3-eu-west-1.amazonaws.com&#39;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Тут все в принципе ясно. Изображение будет храниться еще в двух размерах - medium (500x500) и small (50x50). Пришлось немного почесать голову над последними двумя опциями, без них Амазон будет ругаться XML-кой с просьбой указать endpoint. В s3.yml пишем свои ключи отсюда <a href="https://portal.aws.amazon.com/gp/aws/securityCredentials#account_identifiers">portal.aws.amazon.com</a> (не забывая добавить этот конфиг в .gitignore):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">access_key_id</span><span class="p">:</span> <span class="o">*****</span>
</span><span class='line'><span class="n">secret_access_key</span><span class="p">:</span> <span class="o">******</span>
</span></code></pre></td></tr></table></div></figure>


<p>Вот и вся магия. Теперь в форме загрузки будем писать так:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">=</span> <span class="n">form_for</span> <span class="vi">@photo</span><span class="p">,</span> <span class="ss">url</span><span class="p">:</span> <span class="n">photos_path</span><span class="p">,</span> <span class="ss">html</span><span class="p">:</span> <span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;photo_form&quot;</span><span class="p">,</span> <span class="ss">multipart</span><span class="p">:</span> <span class="kp">true</span><span class="p">}</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">file_field</span> <span class="ss">:image</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">check_box</span> <span class="ss">:enabled</span>
</span><span class='line'>  <span class="nc">.actions</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s1">&#39;Сохранить&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>И чтобы показать нашу картинку в среднем размере со ссылкой на оригинал в шаблонах пишем:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nt">%a</span><span class="p">{</span><span class="ss">href</span><span class="p">:</span> <span class="vi">@photo</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">url</span><span class="p">}=</span> <span class="n">image_tag</span> <span class="vi">@photo</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">url</span> <span class="ss">:medium</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ну не радость ли?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Еще один способ деплоя с помощью Git]]></title>
    <link href="http://unblog.ikito.ru/blog/ieshchie-odin-sposob-dieploia-s-pomoshch%27iu-git"/>
    <updated>2013-05-07T13:27:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/ieshchie-odin-sposob-dieploia-s-pomoshch&#8217;iu-git</id>
    <content type="html"><![CDATA[<p>Собственно, <a href="http://habrahabr.ru/post/178965/">сабж на хабре</a>. Надо будет попробовать соорудить такой же хук для этого бложика.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Старое: Обзор фильма "Железное небо"]]></title>
    <link href="http://unblog.ikito.ru/blog/staroie-obzor-fil%27ma-zhielieznoie-niebo"/>
    <updated>2013-04-19T11:19:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/staroie-obzor-fil&#8217;ma-zhielieznoie-niebo</id>
    <content type="html"><![CDATA[<p>В конце 45-го года, не пожелавший сдаваться вождь Германии решился на отчаянный шаг - с помощью всех тайных знаний Третьего Рейха отправить на луну своих солдат, чтобы в безопасности набраться сил и одним мощным ударом еще раз завершить Вторую Мировую Войну. И вот, в 2018 году план Фюрера уже близок к успешному завершению, к Земле летит настоящий космический флот и супер-оружие уже готово открыть огонь. Противостоять внезапному вторжению будут силы всей планеты.</p>

<p>По моему, странно, что в России фильм &#8220;Железное небо&#8221; не вызвал никакого шума. Казалось бы, все ему предвещало успех - оригинальный сюжет, вирусные трейлеры, тщательно и до мелочей проработанный сценарий, костюмы и дизайн - и тем не менее, в нашей стране он прошел как-то тихо и незаметно. Критики по всему миру так и не пришли к единому мнению по поводу &#8220;Железного неба&#8221; и до сих пор можно найти лишь несколько хороших рецензий на русском языке. Постараюсь исправить это положение и познакомить вас с этим фильмом.</p>

<p>Итак, &#8220;Железное небо&#8221; разрабатывался совместными усилиями студий Финляндии, Австралии и Германии в течение 6 лет. Примечательно, что сами съемки начались только через три с лишним года после начала работы над проектом, и уже после выхода двух трейлеров. Съемки с актерами заняли всего месяц с небольшим. При этом, работа над сюжетом и разработка дизайнов занимали два года, еще год делалась постобработка, сцены компьютерной графики, монтаж и так далее.</p>

<p>Ходит слух, что этот фильм полностью снимался на деньги фанатов, что не совсем верно. На самом деле, деньги, собранные от продажи сувениров, всякой атрибутики и просто пожертвования составили 1.3 миллиона долларов из почти десяти миллионов бюджета. Тем не менее, эти деньги позволили проекту существовать до появления спонсоров.</p>

<p>Что же получилось в итоге? А получилась, добротная, оригинальная научно-фантастическая комедия. &#8220;Железное небо&#8221;, на мой взгляд, полностью оправдало ожидания фанатов. Сюжетная линия динамичная, без заметных провисаний, без заметных ляпов, которые часто допускаются в фильмах о космосе. Очень много времени занимают сцены, полностью нарисованные на компьютере.</p>

<p>Стоит отметить, что фильм снимала та же команда, что и пародию на &#8220;Стар Трек&#8221; - &#8220;Звездная развалина&#8221;. Поэтому, фильму присущ дух пародии на все подряд - от типичных персонажей до клишированных сцен, которые встречаются в каждом уважающем себя фильме. Кроме этого, в полтора часа уместились практически все сюжеты - политика, теория заговора, альтернативная история, космическая опера, женщины в латексе, сумасшедший ученый, американский пафос, НЛО, генная инженерия, стимпанк и многое другое. Концовка фильма добавляет сверху налет философской идеи и в меру грустные размышления о судьбе планеты и природе человека.</p>

<p>В итоге, фильм у меня оставил только хорошие впечатления и желание посмотреть его на большом экране. Так что, если увидите, что он идет в вашем кинотеатре, покупайте билеты не задумываясь.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Старое: и еще несколько ссылок]]></title>
    <link href="http://unblog.ikito.ru/blog/staroie-i-ieshchie-nieskol%27ko-ssylok"/>
    <updated>2013-04-19T11:16:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/staroie-i-ieshchie-nieskol&#8217;ko-ssylok</id>
    <content type="html"><![CDATA[<p>Всякие полезные советы по редактору Sublime Text 2 <a href="http://whiletruecode.com/post/7-handy-text-manipulation-tricks-sublime-text-2">http://whiletruecode.com</a></p>

<p>Гайд по git-у. Бобук одобряе! <a href="http://rogerdudler.github.com/git-guide/">http://rogerdudler.github.com/git-guide/</a></p>

<p>Просто игрушка - можно посмотреть как перезагружалась какая-нибудь старенькая ОС <a href="http://www.therestartpage.com/">http://www.therestartpage.com</a></p>

<p>Забавный сервис, добавляешь небольшой код к себе на сайт и можешь вешать со всех сторон всякие украшательства - <a href="http://makeuptor.com">http://makeuptor.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Старое: хороший телевизор]]></title>
    <link href="http://unblog.ikito.ru/blog/staroie-khoroshii-tielievizor"/>
    <updated>2013-04-19T11:10:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/staroie-khoroshii-tielievizor</id>
    <content type="html"><![CDATA[<p>Телевизор за 24 млн.руб, естественно, отзывов от счастливых пользователей куча - <a href="http://market.yandex.ru/forums/?modelid=6989432&amp;hid=90639">http://market.yandex.ru</a></p>

<p>Добрые люди еще аккустику к нему рекомендуют - <a href="http://pult.ru/product/47685.htm">http://pult.ru/product/47685.htm</a></p>

<p>И бесперебойник. Мало ли. <a href="http://www.citilink.ru/catalog/computer_peripherals/powersafe/ups/578784/">http://www.citilink.ru</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Старое: китайцы и кирпичи]]></title>
    <link href="http://unblog.ikito.ru/blog/staroie-kitaitsy-i-kirpichi"/>
    <updated>2013-04-19T11:09:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/staroie-kitaitsy-i-kirpichi</id>
    <content type="html"><![CDATA[<p>&#8220;Кирпич — лучшее средство в аварийной ситуации. К такому выводу пришли работники общественного транспорта в Китае. Теперь все автобусы Поднебесной оснащены исключительно простым контраварийным средством.</p>

<p>Традиционные молоточки заменили ярко-желтые камни. На каждом из них соответствующая надпись: «Для использования в экстренных ситуациях». Ясное дело, что под «ситуациями» понимаются аварии, когда для эвакуации из салона нужно разбить стекло.&#8221;</p>

<p><a href="http://eterra.info/news/3822">http://eterra.info/news/3822</a></p>

<p>И почему у нас до этого первыми не додумались?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Старое: история про носки]]></title>
    <link href="http://unblog.ikito.ru/blog/staroie-istoriia-pro-noski"/>
    <updated>2013-04-19T11:04:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/staroie-istoriia-pro-noski</id>
    <content type="html"><![CDATA[<p>На адрес чулочной фабрики пришло письмо с заголовком &#8220;ХОЧУ НОСКИ!!!&#8221; (орфография сохранена):</p>

<blockquote><p>Здравствуйте!!! Люди добрые!!!<br/>
Я занимаюсь спортом. У меня нога &#8211;31,5 см длина ступни!!! НИГДЕ НЕ МОГУ КУПИТЬ НОСКИ ПО РАЗМЕРУ!!!<br/>
Вышлите мне, ПОЖАЛУЙСТА, Ваши носки спортивные белые<br/>
артикул: С-459 Вариант 2, носок спортивного назначения, след плюш<br/>
  размеры: 27-29, 23-25, 31-33<br/>
  состав: 85% хлопок, 14% полиамид, 1% эластан.<br/>
ТРИ ПАРЫ!!! 33размер!!!<br/>
Напишите куда и сколько заплатить!!!<br/>
Я живу под Новосибирском в наукограде Кольцово!!! (адрес сообщу Вам после Вашего ответа).<br/>
С НАДЕЖДОЙ И УВАЖЕНИЕМ,  АЛЕКСАНДР</p></blockquote>

<p>К сожалению, не знаю чем закончилась эта история)</p>

<p>P.S. Да ничем, скорее всего, не закончилась, пропустили письмо мимо ушей (хотя, я его тогда честно занес в приемную).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Старое: несколько ссылок про Ruby]]></title>
    <link href="http://unblog.ikito.ru/blog/staroie-nieskol%27ko-ssylok-pro-ruby"/>
    <updated>2013-04-19T10:57:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/staroie-nieskol&#8217;ko-ssylok-pro-ruby</id>
    <content type="html"><![CDATA[<p>Несколько ссылок, касающихся Ruby и рельсов из старого unblog.ikito.ru.</p>

<ul>
<li>Презентация про отличия ruby1.9 от ruby1.8.6 <a href="http://slideshow.rubyforge.org/ruby19.html">http://slideshow.rubyforge.org/ruby19.html</a></li>
<li>Небольшое, но понятное руководство по созданию DSL на Ruby <a href="http://habrahabr.ru/post/48754/">http://habrahabr.ru/post/48754</a></li>
<li>Про деплой рельсов <a href="http://linux.vsevteme.ru/2010/08/17/blog/nastroyka-rails-servera-na-ubuntu-10-04-server-edition">http://linux.vsevteme.ru</a></li>
<li>Интерактивный учебник по руби <a href="https://github.com/edgecase/ruby_koans">https://github.com/edgecase/ruby_koans</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Концерт Роберта Юлдашева]]></title>
    <link href="http://unblog.ikito.ru/blog/kontsiert-robierta-iuldashieva"/>
    <updated>2013-03-28T18:28:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/kontsiert-robierta-iuldashieva</id>
    <content type="html"><![CDATA[<p>Вчера, 27 марта ездили на концерт Роберта Юлдашева и группы Курайсы в Уфимском ДК &#8220;Нефтяник&#8221;. Сказать, что концерт понравился, значит сильно поскромничать. Концерт был замечательный, музыка очень красивая, иногда заводная, иногда грустно-романтичная, иногда просто веселая.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/kyTU5lHk1Cw" frameborder="0" allowfullscreen></iframe>


<p>Пытался снимать на телефон, но, как обычно, не позаботился о свободном месте и оно закончилось где-то в середине. В результате, самые лучшие на мой взгляд композиции я не снял, да и не хотелось смотреть на сцену через экран мобильника. Хотелось просто получать удовольствие и ни о чем не думать.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/vKxGfcADJV8" frameborder="0" allowfullscreen></iframe>


<p>Рекомендую всем у кого будет возможность познакомиться с его творчеством. Тем более, что цены были более чем демократичные - от 300 до 1500 рублей. После концерта пытались найти его диски, но в ДК продавались чьи угодно, но не его. Я бы купил за любые (вменяемые) деньги. Кстати сказать, я до сих пор не нашел, где их можно легально купить.</p>

<p><img src="http://cs10972.vk.me/u60805331/144622788/y_f9cf31cb.jpg" alt="Роберт Юлдашев и группа Курайсы" /></p>

<p>И в заключение - оказалось, что не одному мне кажется, что на концертах любят включать звук погромче, так, чтобы в голове отдавалось и уши болели. В начале концерта я прямо радовался, как хорошо звуковик выставил громкость - не тихо и не громко, в самый раз. Но под конец все-таки случилось то, чего я боялся, опять перегнули с громкостью.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Думай как Git]]></title>
    <link href="http://unblog.ikito.ru/blog/dumai-kak-git"/>
    <updated>2013-03-25T16:34:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/dumai-kak-git</id>
    <content type="html"><![CDATA[<p>Перевод книги <a href="http://think-like-a-git.net/">Think like a Git</a> на русский язык <a href="http://git.geekjob.ru/">http://git.geekjob.ru/</a> от хабрапользователя <a href="http://habrahabr.ru/users/Gangsta/">Gangsta</a>:</p>

<blockquote><p>Когда вы только начинаете работать с Git, что-нибудь очень простое, вроде команды merge, может показаться ужасно сложным. Может оказаться, что вам потребуется очень много времени для того, чтобы изучить все фичи Git, и чувствовать себя при этом достаточно уверенно. (Автору этих строк потребовалось около года или двух).
В один момент, когда некоторые люди достигнут особого просветления в Git, они стремятся делать заявления вроде “Git становится легче, когда ты поймешь X” — но к сожалению это никак не помогает тем, кто только начинает осваивать Git.
Моя цель помочь тебе, Дорогой Читатель, понять о чем говорят те зазнайки</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Удаление дубликатов по двум полям]]></title>
    <link href="http://unblog.ikito.ru/blog/udalieniie-dublikatov-po-dvum-poliam"/>
    <updated>2013-03-25T16:16:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/udalieniie-dublikatov-po-dvum-poliam</id>
    <content type="html"><![CDATA[<p>Если забыть вовремя добавить составной уникальный индекс в таблицу, там обязательно образуются дубликаты, после которых добавить такой индекс уже будет нельзя. Например, для таблицы favorites добавляем уникальный индекс на поля user_id и name. Получим подобное:</p>

<pre><code>PG::Error: ERROR:  could not create unique index "index_favorites_on_user_id_and_name"
DETAIL:  Key (user_id, name)=(1, foo) is duplicated.
: CREATE UNIQUE INDEX "index_favorites_on_user_id_and_name" ON "favorites" ("user_id", "name")
</code></pre>

<p>Чтобы все-таки добавить этот индекс, придется руками удалить дубликаты. Скорее всего, удалять их все не стоит, оставим только по одному. Это делается примерно таким запросом:</p>

<pre><code>DELETE FROM favorites WHERE id NOT IN (
  SELECT MIN(id) FROM favorites GROUP BY (name, user_id)
);
</code></pre>

<p>Делается выборка каждого первого id из групп name + user_id. Их мы как раз оставляем, а удаляем все, которые не попали в выборку.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Трейлер мультфильма Ку! Кин-дза-дза]]></title>
    <link href="http://unblog.ikito.ru/blog/trieilier-mul%27tfil%27ma-ku-kin-dza-dza"/>
    <updated>2013-03-20T14:07:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/trieilier-mul&#8217;tfil&#8217;ma-ku-kin-dza-dza</id>
    <content type="html"><![CDATA[<p>Трейлер мультфильма <a href="https://www.youtube.com/watch?feature=player_embedded&amp;v=kBY-u3HD8Lw">&#8220;Ку! Кин-дза-дза&#8221;</a></p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/kBY-u3HD8Lw" frameborder="0" allowfullscreen></iframe>


<p>И блог ЖЖ одного из <a href="http://alexandreev.livejournal.com/tag/%D0%9A%D0%B8%D0%BD-%D0%94%D0%B7%D0%B0-%D0%94%D0%B7%D0%B0%21">художников</a>, работающих над фильмом.</p>

<p><img src="http://www.ljplus.ru/img4/a/l/alexandreev/_kdd-018.jpg" alt="арт" /></p>

<p>Официальный сайт мультфильма <a href="http://kindzadza-dza.ru/">тут</a>. Приятно сделан, кстати, хоть и не люблю сайты со звуком и избытком анимации.</p>

<p>Если не ошибаюсь (могу и ошибаться), 11 апреля его начнут показывать в кинотеатрах. Заранее боюсь разочароваться, но сходить надо.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Концерт Юлдашева и Курайсы]]></title>
    <link href="http://unblog.ikito.ru/blog/kontsiert-iuldashieva-i-kuraisy"/>
    <updated>2013-03-20T14:07:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/kontsiert-iuldashieva-i-kuraisy</id>
    <content type="html"><![CDATA[<p>Надо постараться попасть на концерт Роберта Юлдашева с группой Курайсы 27 марта (<a href="http://www.ufaconcert.ru/node/129636">ДК Нефтяник, 19-00</a>).</p>

<p><img src="http://dkneftyanik-ufa.ru/images/afisha/yuldashev_0313.jpg" alt="афиша концерта" /></p>

<p>Upd: купили 3 билета на 15 ряд!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Узнайте bundler лучше]]></title>
    <link href="http://unblog.ikito.ru/blog/uznaitie-bundler-luchshie"/>
    <updated>2013-03-15T22:27:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/uznaitie-bundler-luchshie</id>
    <content type="html"><![CDATA[<p>Статья про bundler, много интересного: <a href="http://habrahabr.ru/company/engineyard/blog/172807/">http://habrahabr.ru/company/engineyard/blog/172807/</a></p>

<p>Вкратце:<br/>
<strong>bundle outdated</strong> показывает список гемов, которые можно обновить.<br/>
<strong>bundle show</strong> показывает путь, куда установлен гем.<br/>
<strong>bundle open</strong> открывает код гема в редакторе:</p>

<pre><code>$ bundle open json
To open a bundled gem, set $EDITOR or $BUNDLER_EDITOR
$ export EDITOR=vim
$ bundle open json
</code></pre>

<p><strong>bundle prestine</strong> восстанавливает код указанного гема, если мы его подправляли редактором (используя bundle open)<br/>
<strong>bundle show &#8211;path</strong> показывает список путей, где установлены все гемы проекта. Вроде, так можно найти файлы, где определяются интересные нам классы:</p>

<pre><code>grep -R ActionDispatch::RemoteIp `bundle show --paths`
</code></pre>

<p><strong>bundle init</strong> создает пустой Gemfile<br/>
Гемы можно брать из локального репозитория:</p>

<pre><code>$ echo "gem 'rack', :github =&gt; 'rack/rack', :branch =&gt; 'master'" &gt;&gt; Gemfile
$ bundle config local.rack ~/sw/gems/rack
$ bundle show rack
/Users/andre/sw/gems/rack
</code></pre>

<p>В bundler 1.2 прямо в Gemfile можно объявить версию ruby. Если текущая версия не будет совпадать, получим исключение:</p>

<pre><code>ruby '1.9.3'
</code></pre>

<p>Можно построить визуальную схему зависимостей гемов:</p>

<pre><code>$ brew install graphviz
$ gem install ruby-graphviz
$ bundle viz
</code></pre>

<p><strong>bundle console</strong> запустит ruby-консоль, но со всеми загруженными гемами, указанными в Gemfile. Удобно, если нам не нужен гем rails.</p>

<p>Создание заготовки для своего гема, установка его в систему и публикация на rubygems.org:</p>

<pre><code>bundle gem my\_super\_gem
rake install
rake release
</code></pre>

<p>Вот так можно запускать rake-таски без полного написания bundle exec rspec spec:</p>

<pre><code>$ bundle binstubs rspec-core
$ bin/rspec spec
No examples found.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Странная проблема с исключением Encoding::CompatibilityError]]></title>
    <link href="http://unblog.ikito.ru/blog/strannaia-probliema-s-iskliuchieniiem-encoding-compatibilityerror"/>
    <updated>2013-03-14T00:59:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/strannaia-probliema-s-iskliuchieniiem-encoding-compatibilityerror</id>
    <content type="html"><![CDATA[<p>Странная штука. Вот такой код:</p>

<pre><code>xml_document = Nokogiri::XML(xml_body.strip)
if xml_document.errors.present?
  raise ServiceError.new("Invalid XML: #{xml_document.errors.map(&amp;:to_s)}. XML: #{xml_body}")
end
</code></pre>

<p>Вызывает ошибку</p>

<pre><code>Encoding::CompatibilityError (incompatible character encodings: UTF-8 and ASCII-8BIT)
</code></pre>

<p>если в xml_body приходит невалидный XML с русскими буквами. Точнее, ошибку вызывает &#8220;XML: #{xml_body}&#8221; в тексте исключения. Если ее убрать (а она там и правда не нужна), то ошибка не возникает.</p>
]]></content>
  </entry>
  
</feed>
