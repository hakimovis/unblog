<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gem | Unblog]]></title>
  <link href="http://unblog.ikito.ru/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://unblog.ikito.ru/"/>
  <updated>2014-06-11T16:50:53+06:00</updated>
  <id>http://unblog.ikito.ru/</id>
  <author>
    <name><![CDATA[Hakimovis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Добавляем генератор миграции и моделей к своему гему]]></title>
    <link href="http://unblog.ikito.ru/blog/dobavliaiem-ghienierator-k-svoiemu-ghiemu"/>
    <updated>2013-05-18T12:57:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/dobavliaiem-ghienierator-k-svoiemu-ghiemu</id>
    <content type="html"><![CDATA[<p>В продолжение предыдущей темы расскажу как научить свой гем использовать генератор rails для добавления своей модели в проект:</p>

<p>``` bash
$ rails generate install_my_gem</p>

<pre><code>  create  db/migrate/20120724092434_create_my_models.rb
  create  app/models/my_model.rb
</code></pre>

<p>```</p>

<p>Во первых, создадим сами файлы миграции и модели. Для удобства это лучше делать в традиционных для рельсового прокта местах. Все-таки их придется тестировать. Во вторых, создадим файл install_my_gem.rb ("install_my_gem" можно заменить на название вашего генератора) в папке lig/generators/install_my_gem:</p>

<p>``` ruby
class InstallMyGemGenerator &lt; Rails::Generators::Base
  source_root MyGem::GEM_PATH # В этой константе содержится путь к установленному гему
  # Все методы, объявленные ниже будут выполняться по порядку по команде rails generate install_my_gem</p>

<p>  def copy_migration</p>

<pre><code># Копируем файл миграции из своего db/migrate в тот же db/migrate проекта
migration_file = '20120724092434_create_my_models.rb'
copy_file "db/migrate/#{migration_file}", "db/migrate/#{migration_file}"
</code></pre>

<p>  end</p>

<p>  def copy_my_model</p>

<pre><code># Аналогично копируем файл проекта
copy_file 'app/models/my_model.rb', 'app/models/my_model.rb'
</code></pre>

<p>  end
end
```</p>

<p>MyGem::GEM_PATH нужно будет объявить где-нибудь в my_gem.rb:
<code>ruby
module MyGem
  GEM_PATH = File.expand_path('..', File.dirname(__FILE__))
  ...
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Использование и тестирование моделей ActiveRecord в своем геме]]></title>
    <link href="http://unblog.ikito.ru/blog/ispol%27zovaniie-i-tiestirovaniie-modieliei-activerecord-v-svoiem-ghiemie"/>
    <updated>2013-05-18T12:38:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/ispol'zovaniie-i-tiestirovaniie-modieliei-activerecord-v-svoiem-ghiemie</id>
    <content type="html"><![CDATA[<p>Если ruby gem должен приносить с собой модель, возникнет вопрос - как же его тестировать. Разумеется, подымать для прогона тестов вашего гема базу данных, навешивать миграции и конфигурить конфиги никто не будет, поэтому есть замечательная штука - sqlite3-адаптер для ActiveRecord, работающий с базой данных прямо в памяти. Чтобы воспользоваться этим не нужно ничего особо хитрого.</p>

<p>Сначала добавим зависимости в Gemfile:
<code>ruby
group :test do
  # Т.к. в реальном проекте гем activerecord уже будет подключен и база данных будет своя,
  # а не sqlite, подключаем их только для группы :test
  gem 'activerecord'
  gem 'sqlite3'
end
</code></p>

<p>и подгружаем их же в spec_helper.rb:</p>

<p><code>ruby
require 'active_record'
require 'sqlite3'
</code></p>

<p>Создаем в spec/support файл active_record.rb с примерно таким содержанием:</p>

<p>``` ruby
require 'rspec/rails/extensions/active_record/base' # Всяческие хелперы для тестирования.</p>

<h1>Тут указываем, что будем использовать адаптер sqlite3 и базу данных размещаем в памяти.</h1>

<p>ActiveRecord::Base.establish_connection adapter: "sqlite3", database: ":memory:"</p>

<h1>Запускаем миграции из папки db/migrate или любой другой, которую укажем.</h1>

<p>ActiveRecord::Migrator.up "db/migrate"</p>

<h1>А это нужно, чтобы каждый тест запускался в своей транзакции, которая будет откатываться назад</h1>

<p>RSpec.configure do |config|
  config.around do |example|</p>

<pre><code>ActiveRecord::Base.transaction do
  example.run
  raise ActiveRecord::Rollback
end
</code></pre>

<p>  end
end
```</p>

<p>В обшем-то все. Мы можем использовать наши модели на полную катушку если, конечно, не забыли их подгрузить в spec_helper.rb:
<code>ruby
Dir["#{File.dirname(__FILE__)}/../app/models/*.rb"].each { |f| require f }
</code></p>

<p>Это очень вольный перевод вот этой статьи: <a href="http://iain.nl/testing-activerecord-in-isolation">http://iain.nl/testing-activerecord-in-isolation</a></p>
]]></content>
  </entry>
  
</feed>
