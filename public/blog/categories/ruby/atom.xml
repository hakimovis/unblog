<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Unblog]]></title>
  <link href="http://unblog.ikito.ru/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://unblog.ikito.ru/"/>
  <updated>2013-05-13T00:37:49+06:00</updated>
  <id>http://unblog.ikito.ru/</id>
  <author>
    <name><![CDATA[Hakimovis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby On Rails и загрузка изображений на Amazon S3 Storage]]></title>
    <link href="http://unblog.ikito.ru/blog/ruby-on-rails-i-zaghruzka-izobrazhienii-na-amazon-s3-storage"/>
    <updated>2013-05-12T23:23:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/ruby-on-rails-i-zaghruzka-izobrazhienii-na-amazon-s3-storage</id>
    <content type="html"><![CDATA[<p>Даже не подозревал, что прикрутить аплоад картинок на амазоновый S3 окажется так просто. Добавляем гемы в Gemfile:</p>

<p>``` ruby</p>

<pre><code>gem 'paperclip'
gem 'aws-sdk'
</code></pre>

<p>```</p>

<p>Делаем миграцию:</p>

<p>``` ruby
class CreatePhotos &lt; ActiveRecord::Migration
  def self.up</p>

<pre><code>create_table :photos do |t|
  t.boolean :enabled, null: false, default: true
  t.timestamps
end
add_attachment :photos, :image
</code></pre>

<p>  end</p>

<p>  def self.down</p>

<pre><code>drop_table :photos
</code></pre>

<p>  end
end
```</p>

<p>Тут у модели Photo будет только два поля - image и enabled (КО). Теперь модель:
``` ruby
class Photo &lt; ActiveRecord::Base
  attr_accessible :enabled, :image
  has_attached_file(</p>

<pre><code>:image,
styles: {medium: "500x500&gt;", small: "50x50&gt;"},
storage: :s3,
s3_credentials: "#{Rails.root}/config/s3.yml",
bucket: 'bucket_name',
s3_protocol: 'https',
s3_host_name: 's3-eu-west-1.amazonaws.com'
</code></pre>

<p>  )
end
```</p>

<p>Тут все в принципе ясно. Изображение будет храниться еще в двух размерах - medium (500x500) и small (50x50). Пришлось немного почесать голову над последними двумя опциями, без них Амазон будет ругаться XML-кой с просьбой указать endpoint. В s3.yml пишем свои ключи отсюда <a href="https://portal.aws.amazon.com/gp/aws/securityCredentials#account_identifiers">portal.aws.amazon.com</a> (не забывая добавить этот конфиг в .gitignore):</p>

<p><code>
access_key_id: *****
secret_access_key: ******
</code></p>

<p>Вот и вся магия. Теперь в форме загрузки будем писать так:</p>

<p>``` haml
= form_for @photo, url: photos_path, html: {id: "photo_form", multipart: true} do |f|
  = f.file_field :image
  = f.check_box :enabled
  .actions</p>

<pre><code>= f.submit 'Сохранить'
</code></pre>

<p>```</p>

<p>И чтобы показать нашу картинку в среднем размере со ссылкой на оригинал в шаблонах пишем:</p>

<p><code>haml
%a{href: @photo.image.url}= image_tag @photo.image.url :medium
</code></p>

<p>Ну не радость ли?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Старое: несколько ссылок про Ruby]]></title>
    <link href="http://unblog.ikito.ru/blog/staroie-nieskol%27ko-ssylok-pro-ruby"/>
    <updated>2013-04-19T10:57:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/staroie-nieskol'ko-ssylok-pro-ruby</id>
    <content type="html"><![CDATA[<p>Несколько ссылок, касающихся Ruby и рельсов из старого unblog.ikito.ru.</p>

<ul>
<li>Презентация про отличия ruby1.9 от ruby1.8.6 <a href="http://slideshow.rubyforge.org/ruby19.html">http://slideshow.rubyforge.org/ruby19.html</a></li>
<li>Небольшое, но понятное руководство по созданию DSL на Ruby <a href="http://habrahabr.ru/post/48754/">http://habrahabr.ru/post/48754</a></li>
<li>Про деплой рельсов <a href="http://linux.vsevteme.ru/2010/08/17/blog/nastroyka-rails-servera-na-ubuntu-10-04-server-edition">http://linux.vsevteme.ru</a></li>
<li>Интерактивный учебник по руби <a href="https://github.com/edgecase/ruby_koans">https://github.com/edgecase/ruby_koans</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Узнайте bundler лучше]]></title>
    <link href="http://unblog.ikito.ru/blog/uznaitie-bundler-luchshie"/>
    <updated>2013-03-15T22:27:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/uznaitie-bundler-luchshie</id>
    <content type="html"><![CDATA[<p>Статья про bundler, много интересного: <a href="http://habrahabr.ru/company/engineyard/blog/172807/">http://habrahabr.ru/company/engineyard/blog/172807/</a></p>

<p>Вкратце:<br/>
<strong>bundle outdated</strong> показывает список гемов, которые можно обновить.<br/>
<strong>bundle show</strong> показывает путь, куда установлен гем.<br/>
<strong>bundle open</strong> открывает код гема в редакторе:</p>

<pre><code>$ bundle open json
To open a bundled gem, set $EDITOR or $BUNDLER_EDITOR
$ export EDITOR=vim
$ bundle open json
</code></pre>

<p><strong>bundle prestine</strong> восстанавливает код указанного гема, если мы его подправляли редактором (используя bundle open)<br/>
<strong>bundle show --path</strong> показывает список путей, где установлены все гемы проекта. Вроде, так можно найти файлы, где определяются интересные нам классы:</p>

<pre><code>grep -R ActionDispatch::RemoteIp `bundle show --paths`
</code></pre>

<p><strong>bundle init</strong> создает пустой Gemfile<br/>
Гемы можно брать из локального репозитория:</p>

<pre><code>$ echo "gem 'rack', :github =&gt; 'rack/rack', :branch =&gt; 'master'" &gt;&gt; Gemfile
$ bundle config local.rack ~/sw/gems/rack
$ bundle show rack
/Users/andre/sw/gems/rack
</code></pre>

<p>В bundler 1.2 прямо в Gemfile можно объявить версию ruby. Если текущая версия не будет совпадать, получим исключение:</p>

<pre><code>ruby '1.9.3'
</code></pre>

<p>Можно построить визуальную схему зависимостей гемов:</p>

<pre><code>$ brew install graphviz
$ gem install ruby-graphviz
$ bundle viz
</code></pre>

<p><strong>bundle console</strong> запустит ruby-консоль, но со всеми загруженными гемами, указанными в Gemfile. Удобно, если нам не нужен гем rails.</p>

<p>Создание заготовки для своего гема, установка его в систему и публикация на rubygems.org:</p>

<pre><code>bundle gem my\_super\_gem
rake install
rake release
</code></pre>

<p>Вот так можно запускать rake-таски без полного написания bundle exec rspec spec:</p>

<pre><code>$ bundle binstubs rspec-core
$ bin/rspec spec
No examples found.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Странная проблема с исключением Encoding::CompatibilityError]]></title>
    <link href="http://unblog.ikito.ru/blog/strannaia-probliema-s-iskliuchieniiem-encoding-compatibilityerror"/>
    <updated>2013-03-14T00:59:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/strannaia-probliema-s-iskliuchieniiem-encoding-compatibilityerror</id>
    <content type="html"><![CDATA[<p>Странная штука. Вот такой код:</p>

<pre><code>xml_document = Nokogiri::XML(xml_body.strip)
if xml_document.errors.present?
  raise ServiceError.new("Invalid XML: #{xml_document.errors.map(&amp;:to_s)}. XML: #{xml_body}")
end
</code></pre>

<p>Вызывает ошибку</p>

<pre><code>Encoding::CompatibilityError (incompatible character encodings: UTF-8 and ASCII-8BIT)
</code></pre>

<p>если в xml_body приходит невалидный XML с русскими буквами. Точнее, ошибку вызывает "XML: #{xml_body}" в тексте исключения. Если ее убрать (а она там и правда не нужна), то ошибка не возникает.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stash: pull request из консоли]]></title>
    <link href="http://unblog.ikito.ru/blog/stash-pull-requests-from-the-command-line"/>
    <updated>2013-03-13T01:23:00+06:00</updated>
    <id>http://unblog.ikito.ru/blog/stash-pull-requests-from-the-command-line</id>
    <content type="html"><![CDATA[<p>Вот такой способ делать пулл-реквесты с консоли для Atlassian Stash: <a href="http://blogs.atlassian.com/2012/11/stash-pull-requests-from-the-command-line/">http://blogs.atlassian.com/2012/11/stash-pull-requests-from-the-command-line/</a></p>

<p>И если кратко:</p>

<pre><code>$ gem install atlassian-stash
$ stash pull-request myBranch master @michael
</code></pre>

<p>создает pull request из ветки myBranch в master с ревьюером "michael". Или</p>

<pre><code>$ stash pull-request master
</code></pre>

<p>создает pull request из текущей ветки в master. И после небольших шаманств можно будет писать:</p>

<pre><code>$ git create-pull-request master
</code></pre>
]]></content>
  </entry>
  
</feed>
